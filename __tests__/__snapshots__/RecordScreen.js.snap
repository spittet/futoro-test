// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing the rendering of the recording Screen renders as expected 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <Camera
    aspect={undefined}
    captureTarget={undefined}
    defaultTouchToFocus={true}
    flashMode={undefined}
    mirrorImage={false}
    onFocusChanged={[Function]}
    onZoomChanged={[Function]}
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "flex-end",
      }
    }
    type={undefined}
  />
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "left": 0,
          "padding": 16,
          "position": "absolute",
          "right": 0,
        },
        Object {
          "alignItems": "center",
          "flex": 1,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "top": 0,
        },
      ]
    }
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
          "padding": 5,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Image
        source={1}
      />
    </View>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
          "padding": 5,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Image
        source={1}
      />
    </View>
  </View>
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "left": 0,
          "padding": 16,
          "position": "absolute",
          "right": 0,
        },
        Object {
          "alignItems": "center",
          "backgroundColor": "rgba(0,0,0,0.4)",
          "bottom": 0,
          "flexDirection": "row",
          "justifyContent": "center",
        },
      ]
    }
  >
    <View
      style={
        Object {
          "width": 10,
        }
      }
    />
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "white",
          "borderRadius": 40,
          "opacity": 1,
          "padding": 15,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Image
        source={1}
      />
    </View>
  </View>
</View>
`;
